// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Voting.Stimmunterlagen.Data;

namespace Voting.Stimmunterlagen.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210428071714_AddVoterList")]
    partial class AddVoterList
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeliveryPlannedOn")
                        .HasColumnType("date");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Format")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Approved")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("AttachmentDeliveryDeadline")
                        .HasColumnType("date");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSingleAttendeeContest")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PrintingCenterSignUpDeadline")
                        .HasColumnType("date");

                    b.Property<bool>("TestingPhaseEnded")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId")
                        .IsUnique();

                    b.HasIndex("TestingPhaseEnded");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BasisDomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Canton")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ResponsibleForVotingCards")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("ParentId");

                    b.ToTable("ContestDomainOfInfluences");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluenceHierarchyEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentDomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentDomainOfInfluenceId");

                    b.HasIndex("DomainOfInfluenceId", "ParentDomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("ContestDomainOfInfluenceHierarchyEntries");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Canton")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ResponsibleForVotingCards")
                        .HasColumnType("boolean");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DomainOfInfluences");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceHierarchyEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentDomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentDomainOfInfluenceId");

                    b.HasIndex("DomainOfInfluenceId", "ParentDomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("DomainOfInfluenceHierarchyEntries");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.EventProcessingState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("LastProcessedEventNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("LatestEverProcessedEventNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EventProcessingStates");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusiness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EVoting")
                        .HasColumnType("boolean");

                    b.Property<string>("InternalDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfficialDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PoliticalBusinessNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PoliticalBusinessType")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SwissAbroadVotingRight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("PoliticalBusinesses");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessAttachmentEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PoliticalBusinessId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("PoliticalBusinessId", "AttachmentId")
                        .IsUnique();

                    b.ToTable("PoliticalBusinessAttachmentEntries");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessPermissionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PoliticalBusinessId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.HasIndex("PoliticalBusinessId", "DomainOfInfluenceId", "Role")
                        .IsUnique();

                    b.ToTable("PoliticalBusinessPermissions");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessVoterListEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PoliticalBusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VoterListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VoterListId");

                    b.HasIndex("PoliticalBusinessId", "VoterListId")
                        .IsUnique();

                    b.ToTable("PoliticalBusinessVoterListEntries");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.StepState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Step")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId", "Step")
                        .IsUnique();

                    b.ToTable("StepStates");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Voter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("DwellingNumber")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignZipCode")
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<string>("Locality")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SwissZipCode")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("Voters");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VoterList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfVoters")
                        .HasColumnType("integer");

                    b.Property<int>("VotingCardType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("VoterLists");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Attachment", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("Attachments")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Contest", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithOne("ManagedContest")
                        .HasForeignKey("Voting.Stimmunterlagen.Data.Models.Contest", "DomainOfInfluenceId");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Contest", "Contest")
                        .WithMany("ContestDomainOfInfluences")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Contest");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluenceHierarchyEntry", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("HierarchyEntries")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "ParentDomainOfInfluence")
                        .WithMany("ParentHierarchyEntries")
                        .HasForeignKey("ParentDomainOfInfluenceId")
                        .HasConstraintName("FK_ContestDomainOfInfluenceHierarchyEntries_ContestDomainOfIn~1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("ParentDomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceHierarchyEntry", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("HierarchyEntries")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", "ParentDomainOfInfluence")
                        .WithMany("ParentHierarchyEntries")
                        .HasForeignKey("ParentDomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("ParentDomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusiness", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Contest", "Contest")
                        .WithMany("PoliticalBusinesses")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("PoliticalBusinesses")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessAttachmentEntry", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Attachment", "Attachment")
                        .WithMany("PoliticalBusinessEntries")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.PoliticalBusiness", "PoliticalBusiness")
                        .WithMany("AttachmentEntries")
                        .HasForeignKey("PoliticalBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("PoliticalBusiness");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessPermissionEntry", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("PoliticalBusinessPermissionEntries")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.PoliticalBusiness", "PoliticalBusiness")
                        .WithMany("PermissionEntries")
                        .HasForeignKey("PoliticalBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("PoliticalBusiness");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessVoterListEntry", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.PoliticalBusiness", "PoliticalBusiness")
                        .WithMany("VoterListEntries")
                        .HasForeignKey("PoliticalBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.VoterList", "VoterList")
                        .WithMany("PoliticalBusinessEntries")
                        .HasForeignKey("VoterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PoliticalBusiness");

                    b.Navigation("VoterList");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.StepState", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("StepStates")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Voter", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.VoterList", "List")
                        .WithMany("Voters")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.Country", "Country", b1 =>
                        {
                            b1.Property<Guid>("VoterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Iso2")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("VoterId");

                            b1.ToTable("Voters");

                            b1.WithOwner()
                                .HasForeignKey("VoterId");
                        });

                    b.Navigation("Country")
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VoterList", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("VoterLists")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Attachment", b =>
                {
                    b.Navigation("PoliticalBusinessEntries");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Contest", b =>
                {
                    b.Navigation("ContestDomainOfInfluences");

                    b.Navigation("PoliticalBusinesses");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Children");

                    b.Navigation("HierarchyEntries");

                    b.Navigation("ManagedContest");

                    b.Navigation("ParentHierarchyEntries");

                    b.Navigation("PoliticalBusinesses");

                    b.Navigation("PoliticalBusinessPermissionEntries");

                    b.Navigation("StepStates");

                    b.Navigation("VoterLists");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("HierarchyEntries");

                    b.Navigation("ParentHierarchyEntries");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusiness", b =>
                {
                    b.Navigation("AttachmentEntries");

                    b.Navigation("PermissionEntries");

                    b.Navigation("VoterListEntries");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VoterList", b =>
                {
                    b.Navigation("PoliticalBusinessEntries");

                    b.Navigation("Voters");
                });
#pragma warning restore 612, 618
        }
    }
}
