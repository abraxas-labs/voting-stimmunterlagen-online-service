// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Voting.Stimmunterlagen.Data;

#nullable disable

namespace Voting.Stimmunterlagen.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241211113651_AddDomainOfInfluenceVcFlatRate")]
    partial class AddDomainOfInfluenceVcFlatRate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TemplateTemplateDataContainer", b =>
                {
                    b.Property<int>("DataContainersId")
                        .HasColumnType("integer");

                    b.Property<int>("TemplatesId")
                        .HasColumnType("integer");

                    b.HasKey("DataContainersId", "TemplatesId");

                    b.HasIndex("TemplatesId");

                    b.ToTable("TemplateTemplateDataContainer");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.AdditionalInvoicePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AmountCentime")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("MaterialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("AdditionalInvoicePositions");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DeliveryPlannedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeliveryReceivedOn")
                        .HasColumnType("date");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Format")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderedCount")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int?>("Station")
                        .HasColumnType("integer");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalRequiredCount")
                        .HasColumnType("integer");

                    b.Property<int>("TotalRequiredForVoterListsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.HasIndex("Name");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Name"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Name"), new[] { "gin_trgm_ops" });

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.AttachmentComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.ToTable("AttachmentComment");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.CantonSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Canton")
                        .HasColumnType("integer");

                    b.Property<string>("VotingDocumentsEVotingEaiMessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Canton")
                        .IsUnique();

                    b.ToTable("CantonSettings");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Approved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AttachmentDeliveryDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EVoting")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("GenerateVotingCardsDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPoliticalAssembly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSingleAttendeeContest")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PrintingCenterSignUpDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId")
                        .IsUnique();

                    b.HasIndex("State");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestCountingCircle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasisCountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Bfs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EVoting")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("ContestCountingCircles");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowManualVoterListUpload")
                        .HasColumnType("boolean");

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BasisDomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Bfs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Canton")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ElectoralRegistrationEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExternalPrintingCenter")
                        .HasColumnType("boolean");

                    b.Property<string>("ExternalPrintingCenterEaiMessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("GenerateVotingCardsTriggered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastVoterUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoRef")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ResponsibleForVotingCards")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("RootId")
                        .HasColumnType("uuid");

                    b.Property<string>("SapCustomerOrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("StistatMunicipality")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("VotingCardColor")
                        .HasColumnType("integer");

                    b.Property<bool>("VotingCardFlatRateDisabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityName");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AuthorityName"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("AuthorityName"), new[] { "gin_trgm_ops" });

                    b.HasIndex("ContestId");

                    b.HasIndex("Name");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Name"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Name"), new[] { "gin_trgm_ops" });

                    b.HasIndex("ParentId");

                    b.HasIndex("RootId");

                    b.ToTable("ContestDomainOfInfluences");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluenceCountingCircle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.HasIndex("CountingCircleId", "DomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("ContestDomainOfInfluenceCountingCircles");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluenceHierarchyEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentDomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentDomainOfInfluenceId");

                    b.HasIndex("DomainOfInfluenceId", "ParentDomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("ContestDomainOfInfluenceHierarchyEntries");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestEVotingExportJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Failed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Runner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId")
                        .IsUnique();

                    b.ToTable("ContestEVotingExportJobs");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestOrderNumberState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("LastSetOrderNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ContestOrderNumberStates");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestId", "Language")
                        .IsUnique();

                    b.ToTable("ContestTranslation");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestVotingCardLayout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowCustom")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("VotingCardType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("ContestId", "VotingCardType")
                        .IsUnique();

                    b.ToTable("ContestVotingCardLayouts");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.CountingCircle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bfs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EVoting")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CountingCircles");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Bfs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Canton")
                        .HasColumnType("integer");

                    b.Property<bool>("ElectoralRegistrationEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExternalPrintingCenter")
                        .HasColumnType("boolean");

                    b.Property<string>("ExternalPrintingCenterEaiMessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoRef")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ResponsibleForVotingCards")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RootId")
                        .HasColumnType("uuid");

                    b.Property<string>("SapCustomerOrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("StistatMunicipality")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("VotingCardColor")
                        .HasColumnType("integer");

                    b.Property<bool>("VotingCardFlatRateDisabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("RootId");

                    b.ToTable("DomainOfInfluences");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceAttachmentCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RequiredCount")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredForVoterListsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("DomainOfInfluenceId", "AttachmentId")
                        .IsUnique();

                    b.ToTable("DomainOfInfluenceAttachmentCounts");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceCountingCircle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.HasIndex("CountingCircleId", "DomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("DomainOfInfluenceCountingCircles");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceHierarchyEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentDomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentDomainOfInfluenceId");

                    b.HasIndex("DomainOfInfluenceId", "ParentDomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("DomainOfInfluenceHierarchyEntries");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<int[]>("Groups")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("SampleCount")
                        .HasColumnType("integer");

                    b.Property<int[]>("Sorts")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("DomainOfInfluenceVotingCardConfigurations");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardLayout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowCustom")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DomainOfInfluenceTemplateId")
                        .HasColumnType("integer");

                    b.Property<int?>("OverriddenTemplateId")
                        .HasColumnType("integer");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("VotingCardType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceTemplateId");

                    b.HasIndex("OverriddenTemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("DomainOfInfluenceId", "VotingCardType")
                        .IsUnique();

                    b.ToTable("DomainOfInfluenceVotingCardLayouts");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.EventProcessingState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("LastProcessedEventCommitPosition")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("LastProcessedEventNumber")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("LastProcessedEventPreparePosition")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("LatestEverProcessedEventNumber")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("EventProcessingStates");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ManualVotingCardGeneratorJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LayoutId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LayoutId");

                    b.ToTable("ManualVotingCardGeneratorJobs");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusiness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("PoliticalBusinessNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PoliticalBusinessType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("PoliticalBusinesses");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessAttachmentEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PoliticalBusinessId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("PoliticalBusinessId", "AttachmentId")
                        .IsUnique();

                    b.ToTable("PoliticalBusinessAttachmentEntries");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessPermissionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PoliticalBusinessId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.HasIndex("PoliticalBusinessId", "DomainOfInfluenceId", "Role")
                        .IsUnique();

                    b.ToTable("PoliticalBusinessPermissions");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfficialDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PoliticalBusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PoliticalBusinessId", "Language")
                        .IsUnique();

                    b.ToTable("PoliticalBusinessTranslation");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessVoterListEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PoliticalBusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VoterListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VoterListId");

                    b.HasIndex("PoliticalBusinessId", "VoterListId")
                        .IsUnique();

                    b.ToTable("PoliticalBusinessVoterListEntries");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PrintJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("DoneComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DoneOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessEndedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessStartedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("VotingCardsPrintedAndPackedCount")
                        .HasColumnType("integer");

                    b.Property<double>("VotingCardsShipmentWeight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("PrintJobs");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.StepState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Step")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId", "Step")
                        .IsUnique();

                    b.ToTable("StepStates");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("InternName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.TemplateDataContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TemplateDataContainers");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.TemplateDataField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("ContainerId")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId", "Key")
                        .IsUnique();

                    b.ToTable("TemplateDataFields");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.TemplateDataFieldValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LayoutId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LayoutId");

                    b.HasIndex("FieldId", "LayoutId")
                        .IsUnique();

                    b.ToTable("TemplateDataFieldValues");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Voter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressFirstName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("AddressLastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Bfs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<int>("ContestIndex")
                        .HasColumnType("integer");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DwellingNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ForeignZipCode")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageOfCorrespondence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ListId")
                        .HasColumnType("uuid");

                    b.Property<string>("Locality")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid?>("ManualJobId")
                        .HasColumnType("uuid");

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("PersonIdCategory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PostOfficeBoxText")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Religion")
                        .HasColumnType("text");

                    b.Property<int>("Salutation")
                        .HasColumnType("integer");

                    b.Property<bool>("SendVotingCardsToDomainOfInfluenceReturnAddress")
                        .HasColumnType("boolean");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<int>("SourceIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("SwissZipCode")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("VoterType")
                        .HasColumnType("integer");

                    b.Property<int>("VotingCardType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("ListId");

                    b.HasIndex("ManualJobId")
                        .IsUnique();

                    b.HasIndex("ContestId", "ContestIndex")
                        .IsUnique();

                    b.ToTable("Voters");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VoterDuplicate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("VoterDuplicates");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VoterList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfSendVotingCardsToDomainOfInfluenceReturnAddress")
                        .HasColumnType("integer");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasVoterDuplicates")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ImportId")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfVoters")
                        .HasColumnType("integer");

                    b.Property<bool?>("SendVotingCardsToDomainOfInfluenceReturnAddress")
                        .HasColumnType("boolean");

                    b.Property<int>("VotingCardType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.HasIndex("ImportId", "VotingCardType")
                        .IsUnique();

                    b.ToTable("VoterLists");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VoterListImport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AutoSendVotingCardsToDomainOfInfluenceReturnAddressSplit")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("VoterListImports");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VotingCardGeneratorJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CallbackToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CountOfVoters")
                        .HasColumnType("integer");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<int>("DraftId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Failed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("LayoutId")
                        .HasColumnType("uuid");

                    b.Property<string>("Runner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.HasIndex("LayoutId");

                    b.ToTable("VotingCardGeneratorJobs");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VotingCardPrintFileExportJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Failed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Runner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("VotingCardGeneratorJobId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VotingCardGeneratorJobId")
                        .IsUnique();

                    b.ToTable("VotingCardPrintFileExportJobs");
                });

            modelBuilder.Entity("TemplateTemplateDataContainer", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.TemplateDataContainer", null)
                        .WithMany()
                        .HasForeignKey("DataContainersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Template", null)
                        .WithMany()
                        .HasForeignKey("TemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.AdditionalInvoicePosition", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("AdditionalInvoicePositions")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.User", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("AdditionalInvoicePositionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SecureConnectId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AdditionalInvoicePositionId");

                            b1.ToTable("AdditionalInvoicePositions");

                            b1.WithOwner()
                                .HasForeignKey("AdditionalInvoicePositionId");
                        });

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.User", "ModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("AdditionalInvoicePositionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SecureConnectId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AdditionalInvoicePositionId");

                            b1.ToTable("AdditionalInvoicePositions");

                            b1.WithOwner()
                                .HasForeignKey("AdditionalInvoicePositionId");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("ModifiedBy")
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Attachment", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("Attachments")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.AttachmentComment", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Attachment", "Attachment")
                        .WithMany("Comments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.User", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("AttachmentCommentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SecureConnectId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AttachmentCommentId");

                            b1.ToTable("AttachmentComment");

                            b1.WithOwner()
                                .HasForeignKey("AttachmentCommentId");
                        });

                    b.Navigation("Attachment");

                    b.Navigation("CreatedBy")
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Contest", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithOne("ManagedContest")
                        .HasForeignKey("Voting.Stimmunterlagen.Data.Models.Contest", "DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestCountingCircle", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Contest", "Contest")
                        .WithMany("ContestCountingCircles")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Contest", "Contest")
                        .WithMany("ContestDomainOfInfluences")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "Root")
                        .WithMany("RootOfChildrenAndSelf")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceCantonDefaults", "CantonDefaults", b1 =>
                        {
                            b1.Property<Guid>("ContestDomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("VotingDocumentsEVotingEaiMessageType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ContestDomainOfInfluenceId");

                            b1.ToTable("ContestDomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("ContestDomainOfInfluenceId");
                        });

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardPrintData", "PrintData", b1 =>
                        {
                            b1.Property<Guid>("ContestDomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ShippingAway")
                                .HasColumnType("integer");

                            b1.Property<int>("ShippingMethod")
                                .HasColumnType("integer");

                            b1.Property<int>("ShippingReturn")
                                .HasColumnType("integer");

                            b1.Property<bool>("ShippingVotingCardsToDeliveryAddress")
                                .HasColumnType("boolean");

                            b1.HasKey("ContestDomainOfInfluenceId");

                            b1.ToTable("ContestDomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("ContestDomainOfInfluenceId");
                        });

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardReturnAddress", "ReturnAddress", b1 =>
                        {
                            b1.Property<Guid>("ContestDomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressAddition")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressLine2")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ContestDomainOfInfluenceId");

                            b1.ToTable("ContestDomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("ContestDomainOfInfluenceId");
                        });

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardSwissPostData", "SwissPostData", b1 =>
                        {
                            b1.Property<Guid>("ContestDomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FrankingLicenceReturnNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("InvoiceReferenceNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ContestDomainOfInfluenceId");

                            b1.ToTable("ContestDomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("ContestDomainOfInfluenceId");
                        });

                    b.Navigation("CantonDefaults")
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Parent");

                    b.Navigation("PrintData");

                    b.Navigation("ReturnAddress");

                    b.Navigation("Root");

                    b.Navigation("SwissPostData");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluenceCountingCircle", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestCountingCircle", "CountingCircle")
                        .WithMany("DomainOfInfluences")
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("CountingCircles")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountingCircle");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluenceHierarchyEntry", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("HierarchyEntries")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "ParentDomainOfInfluence")
                        .WithMany("ParentHierarchyEntries")
                        .HasForeignKey("ParentDomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ContestDomainOfInfluenceHierarchyEntries_ContestDomainOfIn~1");

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("ParentDomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestEVotingExportJob", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Contest", "Contest")
                        .WithOne("EVotingExportJob")
                        .HasForeignKey("Voting.Stimmunterlagen.Data.Models.ContestEVotingExportJob", "ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestTranslation", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Contest", "Contest")
                        .WithMany("Translations")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestVotingCardLayout", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Contest", "Contest")
                        .WithMany("VotingCardLayouts")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Template", "Template")
                        .WithMany("ContestVotingCardLayouts")
                        .HasForeignKey("TemplateId");

                    b.Navigation("Contest");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", "Root")
                        .WithMany("RootOfChildrenAndSelf")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceCantonDefaults", "CantonDefaults", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("VotingDocumentsEVotingEaiMessageType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DomainOfInfluenceId");

                            b1.ToTable("DomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceId");
                        });

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardPrintData", "PrintData", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ShippingAway")
                                .HasColumnType("integer");

                            b1.Property<int>("ShippingMethod")
                                .HasColumnType("integer");

                            b1.Property<int>("ShippingReturn")
                                .HasColumnType("integer");

                            b1.Property<bool>("ShippingVotingCardsToDeliveryAddress")
                                .HasColumnType("boolean");

                            b1.HasKey("DomainOfInfluenceId");

                            b1.ToTable("DomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceId");
                        });

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardReturnAddress", "ReturnAddress", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressAddition")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressLine2")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DomainOfInfluenceId");

                            b1.ToTable("DomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceId");
                        });

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardSwissPostData", "SwissPostData", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FrankingLicenceReturnNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("InvoiceReferenceNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DomainOfInfluenceId");

                            b1.ToTable("DomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceId");
                        });

                    b.Navigation("CantonDefaults")
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("PrintData");

                    b.Navigation("ReturnAddress");

                    b.Navigation("Root");

                    b.Navigation("SwissPostData");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceAttachmentCount", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Attachment", "Attachment")
                        .WithMany("DomainOfInfluenceAttachmentCounts")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("DomainOfInfluenceAttachmentCounts")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceCountingCircle", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany("DomainOfInfluences")
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("CountingCircles")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountingCircle");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceHierarchyEntry", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("HierarchyEntries")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", "ParentDomainOfInfluence")
                        .WithMany("ParentHierarchyEntries")
                        .HasForeignKey("ParentDomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("ParentDomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardConfiguration", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithOne("VotingCardConfiguration")
                        .HasForeignKey("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardConfiguration", "DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardLayout", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("VotingCardLayouts")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Template", "DomainOfInfluenceTemplate")
                        .WithMany()
                        .HasForeignKey("DomainOfInfluenceTemplateId");

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Template", "OverriddenTemplate")
                        .WithMany("OverriddenDomainOfInfluenceVotingCardLayouts")
                        .HasForeignKey("OverriddenTemplateId");

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Template", "Template")
                        .WithMany("DomainOfInfluenceVotingCardLayouts")
                        .HasForeignKey("TemplateId");

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("DomainOfInfluenceTemplate");

                    b.Navigation("OverriddenTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ManualVotingCardGeneratorJob", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardLayout", "Layout")
                        .WithMany("ManualJobs")
                        .HasForeignKey("LayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.User", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("ManualVotingCardGeneratorJobId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SecureConnectId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ManualVotingCardGeneratorJobId");

                            b1.ToTable("ManualVotingCardGeneratorJobs");

                            b1.WithOwner()
                                .HasForeignKey("ManualVotingCardGeneratorJobId");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("Layout");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusiness", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Contest", "Contest")
                        .WithMany("PoliticalBusinesses")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("PoliticalBusinesses")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessAttachmentEntry", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Attachment", "Attachment")
                        .WithMany("PoliticalBusinessEntries")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.PoliticalBusiness", "PoliticalBusiness")
                        .WithMany("AttachmentEntries")
                        .HasForeignKey("PoliticalBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("PoliticalBusiness");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessPermissionEntry", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("PoliticalBusinessPermissionEntries")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.PoliticalBusiness", "PoliticalBusiness")
                        .WithMany("PermissionEntries")
                        .HasForeignKey("PoliticalBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("PoliticalBusiness");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessTranslation", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.PoliticalBusiness", "PoliticalBusiness")
                        .WithMany("Translations")
                        .HasForeignKey("PoliticalBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PoliticalBusiness");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusinessVoterListEntry", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.PoliticalBusiness", "PoliticalBusiness")
                        .WithMany("VoterListEntries")
                        .HasForeignKey("PoliticalBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.VoterList", "VoterList")
                        .WithMany("PoliticalBusinessEntries")
                        .HasForeignKey("VoterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PoliticalBusiness");

                    b.Navigation("VoterList");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PrintJob", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithOne("PrintJob")
                        .HasForeignKey("Voting.Stimmunterlagen.Data.Models.PrintJob", "DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.StepState", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("StepStates")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.TemplateDataField", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.TemplateDataContainer", "Container")
                        .WithMany("Fields")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Container");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.TemplateDataFieldValue", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.TemplateDataField", "Field")
                        .WithMany("Values")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardLayout", "Layout")
                        .WithMany("TemplateDataFieldValues")
                        .HasForeignKey("LayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Layout");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Voter", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.Contest", "Contest")
                        .WithMany("Voters")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.VotingCardGeneratorJob", "Job")
                        .WithMany("Voter")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.VoterList", "List")
                        .WithMany("Voters")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ManualVotingCardGeneratorJob", "ManualJob")
                        .WithOne("Voter")
                        .HasForeignKey("Voting.Stimmunterlagen.Data.Models.Voter", "ManualJobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.Country", "Country", b1 =>
                        {
                            b1.Property<Guid>("VoterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Iso2")
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("VoterId");

                            b1.ToTable("Voters");

                            b1.WithOwner()
                                .HasForeignKey("VoterId");
                        });

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.VoterPageInfo", "PageInfo", b1 =>
                        {
                            b1.Property<Guid>("VoterId")
                                .HasColumnType("uuid");

                            b1.Property<int>("PageFrom")
                                .HasColumnType("integer");

                            b1.Property<int>("PageTo")
                                .HasColumnType("integer");

                            b1.HasKey("VoterId");

                            b1.ToTable("Voters");

                            b1.WithOwner()
                                .HasForeignKey("VoterId");
                        });

                    b.OwnsMany("Voting.Stimmunterlagen.Data.Models.VoterPlaceOfOrigin", "PlacesOfOrigin", b1 =>
                        {
                            b1.Property<Guid>("VoterId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("Canton")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("VoterId", "Id");

                            b1.ToTable("VoterPlaceOfOrigin");

                            b1.WithOwner("Voter")
                                .HasForeignKey("VoterId");

                            b1.Navigation("Voter");
                        });

                    b.OwnsOne("Voting.Stimmunterlagen.Data.Models.VoterSwissAbroadPerson", "SwissAbroadPerson", b1 =>
                        {
                            b1.Property<Guid>("VoterId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("DateOfRegistration")
                                .HasColumnType("date");

                            b1.HasKey("VoterId");

                            b1.ToTable("Voters");

                            b1.WithOwner()
                                .HasForeignKey("VoterId");

                            b1.OwnsOne("Voting.Stimmunterlagen.Data.Models.VoterSwissAbroadExtension", "Extension", b2 =>
                                {
                                    b2.Property<Guid>("VoterSwissAbroadPersonVoterId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("PostageCode")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.HasKey("VoterSwissAbroadPersonVoterId");

                                    b2.ToTable("Voters");

                                    b2.WithOwner()
                                        .HasForeignKey("VoterSwissAbroadPersonVoterId");

                                    b2.OwnsOne("Voting.Stimmunterlagen.Data.Models.VoterSwissAbroadExtensionAddress", "Address", b3 =>
                                        {
                                            b3.Property<Guid>("VoterSwissAbroadExtensionVoterSwissAbroadPersonVoterId")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("Line1")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Line2")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Line3")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Line4")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Line5")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Line6")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Line7")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.HasKey("VoterSwissAbroadExtensionVoterSwissAbroadPersonVoterId");

                                            b3.ToTable("Voters");

                                            b3.WithOwner()
                                                .HasForeignKey("VoterSwissAbroadExtensionVoterSwissAbroadPersonVoterId");
                                        });

                                    b2.OwnsOne("Voting.Stimmunterlagen.Data.Models.VoterSwissAbroadExtensionAuthority", "Authority", b3 =>
                                        {
                                            b3.Property<Guid>("VoterSwissAbroadExtensionVoterSwissAbroadPersonVoterId")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("AddressLine1")
                                                .IsRequired()
                                                .HasMaxLength(60)
                                                .HasColumnType("character varying(60)");

                                            b3.Property<string>("AddressLine2")
                                                .IsRequired()
                                                .HasMaxLength(60)
                                                .HasColumnType("character varying(60)");

                                            b3.Property<string>("Street")
                                                .IsRequired()
                                                .HasMaxLength(60)
                                                .HasColumnType("character varying(60)");

                                            b3.Property<int?>("SwissZipCode")
                                                .HasColumnType("integer");

                                            b3.Property<string>("Town")
                                                .IsRequired()
                                                .HasMaxLength(40)
                                                .HasColumnType("character varying(40)");

                                            b3.HasKey("VoterSwissAbroadExtensionVoterSwissAbroadPersonVoterId");

                                            b3.ToTable("Voters");

                                            b3.WithOwner()
                                                .HasForeignKey("VoterSwissAbroadExtensionVoterSwissAbroadPersonVoterId");

                                            b3.OwnsOne("Voting.Stimmunterlagen.Data.Models.Organisation", "Organisation", b4 =>
                                                {
                                                    b4.Property<Guid>("VoterSwissAbroadExtensionAuthorityVoterSwissAbroadExtensionVoterSwissAbroadPersonVoterId")
                                                        .HasColumnType("uuid")
                                                        .HasColumnName("VoterSwissAbroadExtensionAuthorityVoterSwissAbroadExtensionVot~");

                                                    b4.Property<string>("AddOn1")
                                                        .IsRequired()
                                                        .HasMaxLength(60)
                                                        .HasColumnType("character varying(60)");

                                                    b4.Property<string>("Name")
                                                        .IsRequired()
                                                        .HasMaxLength(60)
                                                        .HasColumnType("character varying(60)");

                                                    b4.HasKey("VoterSwissAbroadExtensionAuthorityVoterSwissAbroadExtensionVoterSwissAbroadPersonVoterId");

                                                    b4.ToTable("Voters");

                                                    b4.WithOwner()
                                                        .HasForeignKey("VoterSwissAbroadExtensionAuthorityVoterSwissAbroadExtensionVoterSwissAbroadPersonVoterId");
                                                });

                                            b3.OwnsOne("Voting.Stimmunterlagen.Data.Models.Country", "Country", b4 =>
                                                {
                                                    b4.Property<Guid>("VoterSwissAbroadExtensionAuthorityVoterSwissAbroadExtensionVoterSwissAbroadPersonVoterId")
                                                        .HasColumnType("uuid")
                                                        .HasColumnName("VoterSwissAbroadExtensionAuthorityVoterSwissAbroadExtensionVot~");

                                                    b4.Property<string>("Iso2")
                                                        .HasMaxLength(2)
                                                        .HasColumnType("character varying(2)");

                                                    b4.Property<string>("Name")
                                                        .IsRequired()
                                                        .HasMaxLength(50)
                                                        .HasColumnType("character varying(50)");

                                                    b4.HasKey("VoterSwissAbroadExtensionAuthorityVoterSwissAbroadExtensionVoterSwissAbroadPersonVoterId");

                                                    b4.ToTable("Voters");

                                                    b4.WithOwner()
                                                        .HasForeignKey("VoterSwissAbroadExtensionAuthorityVoterSwissAbroadExtensionVoterSwissAbroadPersonVoterId");
                                                });

                                            b3.Navigation("Country")
                                                .IsRequired();

                                            b3.Navigation("Organisation")
                                                .IsRequired();
                                        });

                                    b2.Navigation("Address");

                                    b2.Navigation("Authority");
                                });

                            b1.OwnsOne("Voting.Stimmunterlagen.Data.Models.Country", "ResidenceCountry", b2 =>
                                {
                                    b2.Property<Guid>("VoterSwissAbroadPersonVoterId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Iso2")
                                        .HasMaxLength(2)
                                        .HasColumnType("character varying(2)");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.HasKey("VoterSwissAbroadPersonVoterId");

                                    b2.ToTable("Voters");

                                    b2.WithOwner()
                                        .HasForeignKey("VoterSwissAbroadPersonVoterId");
                                });

                            b1.Navigation("Extension");

                            b1.Navigation("ResidenceCountry")
                                .IsRequired();
                        });

                    b.Navigation("Contest");

                    b.Navigation("Country")
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("List");

                    b.Navigation("ManualJob");

                    b.Navigation("PageInfo");

                    b.Navigation("PlacesOfOrigin");

                    b.Navigation("SwissAbroadPerson");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VoterDuplicate", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.VoterList", "List")
                        .WithMany("VoterDuplicates")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VoterList", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("VoterLists")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.VoterListImport", "Import")
                        .WithMany("VoterLists")
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("Import");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VoterListImport", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("VoterListImports")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VotingCardGeneratorJob", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", "DomainOfInfluence")
                        .WithMany("VotingCardGeneratorJobs")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardLayout", "Layout")
                        .WithMany("Jobs")
                        .HasForeignKey("LayoutId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("Layout");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VotingCardPrintFileExportJob", b =>
                {
                    b.HasOne("Voting.Stimmunterlagen.Data.Models.VotingCardGeneratorJob", "VotingCardGeneratorJob")
                        .WithOne("VotingCardPrintFileExportJob")
                        .HasForeignKey("Voting.Stimmunterlagen.Data.Models.VotingCardPrintFileExportJob", "VotingCardGeneratorJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VotingCardGeneratorJob");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Attachment", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DomainOfInfluenceAttachmentCounts");

                    b.Navigation("PoliticalBusinessEntries");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Contest", b =>
                {
                    b.Navigation("ContestCountingCircles");

                    b.Navigation("ContestDomainOfInfluences");

                    b.Navigation("EVotingExportJob");

                    b.Navigation("PoliticalBusinesses");

                    b.Navigation("Translations");

                    b.Navigation("Voters");

                    b.Navigation("VotingCardLayouts");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestCountingCircle", b =>
                {
                    b.Navigation("DomainOfInfluences");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ContestDomainOfInfluence", b =>
                {
                    b.Navigation("AdditionalInvoicePositions");

                    b.Navigation("Attachments");

                    b.Navigation("Children");

                    b.Navigation("CountingCircles");

                    b.Navigation("DomainOfInfluenceAttachmentCounts");

                    b.Navigation("HierarchyEntries");

                    b.Navigation("ManagedContest");

                    b.Navigation("ParentHierarchyEntries");

                    b.Navigation("PoliticalBusinessPermissionEntries");

                    b.Navigation("PoliticalBusinesses");

                    b.Navigation("PrintJob");

                    b.Navigation("RootOfChildrenAndSelf");

                    b.Navigation("StepStates");

                    b.Navigation("VoterListImports");

                    b.Navigation("VoterLists");

                    b.Navigation("VotingCardConfiguration");

                    b.Navigation("VotingCardGeneratorJobs");

                    b.Navigation("VotingCardLayouts");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.CountingCircle", b =>
                {
                    b.Navigation("DomainOfInfluences");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluence", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("CountingCircles");

                    b.Navigation("HierarchyEntries");

                    b.Navigation("ParentHierarchyEntries");

                    b.Navigation("RootOfChildrenAndSelf");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.DomainOfInfluenceVotingCardLayout", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("ManualJobs");

                    b.Navigation("TemplateDataFieldValues");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.ManualVotingCardGeneratorJob", b =>
                {
                    b.Navigation("Voter")
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.PoliticalBusiness", b =>
                {
                    b.Navigation("AttachmentEntries");

                    b.Navigation("PermissionEntries");

                    b.Navigation("Translations");

                    b.Navigation("VoterListEntries");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.Template", b =>
                {
                    b.Navigation("ContestVotingCardLayouts");

                    b.Navigation("DomainOfInfluenceVotingCardLayouts");

                    b.Navigation("OverriddenDomainOfInfluenceVotingCardLayouts");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.TemplateDataContainer", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.TemplateDataField", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VoterList", b =>
                {
                    b.Navigation("PoliticalBusinessEntries");

                    b.Navigation("VoterDuplicates");

                    b.Navigation("Voters");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VoterListImport", b =>
                {
                    b.Navigation("VoterLists");
                });

            modelBuilder.Entity("Voting.Stimmunterlagen.Data.Models.VotingCardGeneratorJob", b =>
                {
                    b.Navigation("Voter");

                    b.Navigation("VotingCardPrintFileExportJob");
                });
#pragma warning restore 612, 618
        }
    }
}
